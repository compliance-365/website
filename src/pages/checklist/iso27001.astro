---
import Base from '../../layouts/BaseLayout.astro';
import Header from '../../components/Header.astro';
import Footer from '../../components/Footer.astro';

const base = import.meta.env.BASE_URL || '/';
const STANDARD = 'ISO 27001';

const QUESTIONS = [
  { id:'scope',   label:'Clear ISMS scope defined (org, products, locations)?' },
  { id:'risk',    label:'Risk methodology & current risk register in place?' },
  { id:'controls',label:'Controls selected & mapped (Annex A / SoA)?' },
  { id:'policy',  label:'Policy suite approved & communicated?' },
  { id:'evidence',label:'Automated evidence (M365: SharePoint/Entra/Defender/etc.)?' },
  { id:'audit',   label:'Internal audit planned/completed for this cycle?' }
];
---

<Base title="ISO 27001 (Security) Readiness Checklist" description="Answer quick questions, get an instant score and a downloadable PDF.">
  <Header />

  <section class="container section">
    <h1>{STANDARD} Readiness Checklist</h1>

    <div class="progress" style="margin:10px 0 14px;background:#f3f4f7;height:10px;border-radius:999px;overflow:hidden">
      <div id="bar" style="height:10px;width:0;background:linear-gradient(90deg,var(--primary),var(--accent))"></div>
    </div>

    <div class="check-tabs" style="margin-top:12px;display:flex;gap:10px;flex-wrap:wrap">
      <a href={`${base}checklist/iso27001`} class="pill active">ISO 27001</a>
      <a href={`${base}checklist/iso27701`} class="pill">ISO 27701</a>
      <a href={`${base}checklist/iso42001`} class="pill">ISO 42001</a>
    </div>

    <div class="card" style="margin-top:12px">
      <div class="form-grid" id="form"></div>
      <div class="actions" style="display:flex;justify-content:space-between;align-items:center;margin-top:14px">
        <button class="btn btn-ghost" id="resetBtn">Reset</button>
        <button class="btn btn-primary" id="pdfBtn">Download PDF</button>
      </div>
    </div>

    <div class="card" style="margin-top:14px">
      <div class="scorecard" style="display:flex;gap:12px;align-items:center">
        <div class="score" id="scoreNum" style="font-weight:900;font-size:1.6rem">0%</div>
        <div>
          <strong id="scoreLabel">Not started</strong>
          <p class="muted small" id="scoreHint" style="margin:.2rem 0 0">Answer the questions to see your readiness.</p>
        </div>
      </div>
    </div>
  </section>

  <Footer />

  <!-- jsPDF for client-side PDF -->
  <script src="https://cdn.jsdelivr.net/npm/jspdf@2.5.1/dist/jspdf.umd.min.js" defer></script>

  <script is:inline>
    // Serialize server data safely into the client script
    const STANDARD = JSON.parse(`"${STANDARD}"`);
    const QUESTIONS = JSON.parse(`${JSON.stringify(QUESTIONS)}`);

    const form = document.getElementById('form');
    const bar  = document.getElementById('bar');
    const scoreNum   = document.getElementById('scoreNum');
    const scoreLabel = document.getElementById('scoreLabel');
    const scoreHint  = document.getElementById('scoreHint');

    // Persist per-page (optional): uncomment to keep answers across refreshes
    // const STORE_KEY = 'c365_check_iso27001';
    // let state = JSON.parse(localStorage.getItem(STORE_KEY) || 'null') || Object.fromEntries(QUESTIONS.map(q => [q.id, null]));

    let state = Object.fromEntries(QUESTIONS.map(q => [q.id, null]));

    function render(){
      form.innerHTML = '';
      QUESTIONS.forEach((q,i)=>{
        const sel = state[q.id];
        const html = `
          <div class="field" style="padding:10px 0;border-bottom:1px solid var(--border)">
            <label style="display:block;font-weight:800;margin-bottom:8px">${i+1}. ${q.label}</label>
            <div class="opts" style="display:flex;gap:8px">
              <button class="opt pill ${sel===2?'active':''}" data-id="${q.id}" data-v="2">Yes</button>
              <button class="opt pill ${sel===1?'active':''}" data-id="${q.id}" data-v="1">Partial</button>
              <button class="opt pill ${sel===0?'active':''}" data-id="${q.id}" data-v="0">No</button>
            </div>
          </div>`;
        const wrap = document.createElement('div');
        wrap.innerHTML = html;
        form.appendChild(wrap.firstElementChild);
      });
    }

    function update(){
      const answered = Object.values(state).filter(v => v !== null).length;
      const progressPct = Math.round((answered / QUESTIONS.length) * 100);
      bar.style.width = progressPct + '%';

      const scoreRaw = Object.values(state).reduce((a,v)=>a + (v??0), 0); // Yes=2, Partial=1, No=0
      const max = QUESTIONS.length * 2;
      const score = Math.round((scoreRaw / max) * 100) || 0;
      scoreNum.textContent = score + '%';

      let label='Not started', hint='Answer the questions to see your readiness.';
      if(answered>0 && score<40){label='Early stage';   hint='Focus on scope, risks and core policies first.';}
      else if(score<70)        {label='In progress';   hint='Finish SoA, implement controls and prep internal audit.';}
      else if(score<90)        {label='Nearly ready';  hint='Close gaps, capture automated evidence and book your audit.';}
      else                     {label='Audit-ready';   hint='You look ready. Lock in dates with a cert body.';}
      scoreLabel.textContent = label;
      scoreHint.textContent  = hint;

      // Persist (optional)
      // localStorage.setItem(STORE_KEY, JSON.stringify(state));
    }

    // Delegated clicks for options
    form.addEventListener('click', (e)=>{
      const btn = e.target.closest('.opt'); if(!btn) return;
      const id = btn.dataset.id;
      const val = Number(btn.dataset.v);
      state[id] = val;
      // toggle active
      btn.parentElement.querySelectorAll('.opt').forEach(o=>o.classList.remove('active'));
      btn.classList.add('active');
      update();
    });

    // Reset
    document.getElementById('resetBtn').onclick = ()=>{
      state = Object.fromEntries(QUESTIONS.map(q => [q.id, null]));
      render(); update();
      // localStorage.removeItem(STORE_KEY);
    };

    // PDF
    document.getElementById('pdfBtn').onclick = async ()=>{
      const { jsPDF } = window.jspdf;
      const doc = new jsPDF();
      let y = 16;

      doc.setFont('helvetica','bold'); doc.setFontSize(16);
      doc.text(`${STANDARD} Readiness Summary`, 14, y); y+=8;

      const answered = Object.values(state).filter(v=>v!==null).length;
      const scoreRaw = Object.values(state).reduce((a,v)=>a + (v??0), 0);
      const max = QUESTIONS.length * 2;
      const score = Math.round((scoreRaw / max) * 100) || 0;

      doc.setFont('helvetica','normal'); doc.setFontSize(11);
      doc.text(`Score: ${score}% • Answered ${answered}/${QUESTIONS.length}`, 14, y); y+=8;
      doc.text(`Generated: ${new Date().toLocaleString()}`, 14, y); y+=10;

      QUESTIONS.forEach((q,i)=>{
        const v = state[q.id];
        const label = v===2?'Yes' : v===1?'Partial' : v===0?'No' : '—';
        if(y > 270){ doc.addPage(); y = 16; }
        doc.text(`${String(i+1).padStart(2,'0')}. ${q.label} — ${label}`, 14, y);
        y += 7;
      });

      doc.save('iso27001_readiness.pdf');
    };

    // Initial paint
    render(); update();
  </script>

  <style is:inline>
    .pill.active{ background: var(--primary); color:#fff; border-color: transparent; }
  </style>
</Base>
