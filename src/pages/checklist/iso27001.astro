---
import Base from '../../layouts/BaseLayout.astro';
import Header from '../../components/Header.astro';
import Footer from '../../components/Footer.astro';
const base = import.meta.env.BASE_URL || '/';
const STANDARD = 'ISO 27001';
const QUESTIONS = [
  { id:'scope', label:'Clear ISMS scope defined (org, products, locations)?' },
  { id:'risk', label:'Risk methodology & current risk register in place?' },
  { id:'controls', label:'Controls selected & mapped (Annex A / SoA)?' },
  { id:'policy', label:'Policy suite approved & communicated?' },
  { id:'evidence', label:'Automated evidence (M365: SharePoint/Entra/Defender/etc.)?' },
  { id:'audit', label:'Internal audit planned/completed for this cycle?' }
];
---
<Base title="ISO 27001 Readiness Checklist" description="Answer quick questions, get an instant score and a downloadable PDF.">
  <Header />
  <section class="container section">
    <h1>{STANDARD} Readiness Checklist</h1>
    <div class="progress"><div id="bar" style="width:0%"></div></div>

    <div class="check-tabs" style="margin-top:12px">
      <a href={`${base}checklist/iso27001`} class="active">ISO 27001</a>
      <a href={`${base}checklist/iso27701`}>ISO 27701</a>
      <a href={`${base}checklist/iso42001`}>ISO 42001</a>
    </div>

    <div class="card">
      <div class="form-grid" id="form"></div>
      <div class="actions">
        <div>
          <button class="btn btn-ghost" id="resetBtn">Reset</button>
        </div>
        <div>
          <button class="btn btn-primary" id="pdfBtn">Download PDF</button>
        </div>
      </div>
    </div>

    <div class="card" style="margin-top:14px">
      <div class="scorecard">
        <div class="score" id="scoreNum">0%</div>
        <div>
          <strong id="scoreLabel">Not started</strong>
          <p class="muted small" id="scoreHint">Answer the questions to see your readiness.</p>
        </div>
      </div>
    </div>
  </section>
  <Footer />

  <!-- jsPDF for client-side PDF -->
  <script src="https://cdn.jsdelivr.net/npm/jspdf@2.5.1/dist/jspdf.umd.min.js" defer></script>

  <script is:inline>
    const STANDARD = {STANDARD};
    const QUESTIONS = {JSON.stringify(QUESTIONS)};

    const form = document.getElementById('form');
    const bar  = document.getElementById('bar');
    const scoreNum = document.getElementById('scoreNum');
    const scoreLabel = document.getElementById('scoreLabel');
    const scoreHint  = document.getElementById('scoreHint');

    const state = Object.fromEntries(QUESTIONS.map(q => [q.id, null]));

    function render(){
      form.innerHTML = '';
      QUESTIONS.forEach((q,i)=>{
        const field = document.createElement('div');
        field.className = 'field';
        field.innerHTML = `
          <label>${i+1}. ${q.label}</label>
          <div class="opts">
            <button class="opt" data-id="${q.id}" data-v="2">Yes</button>
            <button class="opt" data-id="${q.id}" data-v="1">Partial</button>
            <button class="opt" data-id="${q.id}" data-v="0">No</button>
          </div>
        `;
        form.appendChild(field);
      });

      form.addEventListener('click', (e)=>{
        const b = e.target.closest('.opt'); if(!b) return;
        const id = b.dataset.id, val = Number(b.dataset.v);
        state[id] = val;
        // active styling
        b.parentElement.querySelectorAll('.opt').forEach(o=>o.classList.remove('active'));
        b.classList.add('active');
        update();
      }, { once:false });
    }

    function update(){
      const answered = Object.values(state).filter(v => v !== null).length;
      const pct = Math.round((answered / QUESTIONS.length) * 100);
      bar.style.width = pct + '%';

      const scoreRaw = Object.values(state).reduce((a,v)=>a + (v??0), 0);
      const max = QUESTIONS.length * 2;
      const score = Math.round((scoreRaw / max) * 100);
      scoreNum.textContent = isNaN(score)? '0%' : score + '%';

      let label='Not started', hint='Answer the questions to see your readiness.';
      if(answered>0 && score<40){label='Early stage'; hint='Focus on scope, risks and core policies first.';}
      else if(score<70){label='In progress'; hint='Finish SoA, implement controls and prep internal audit.';}
      else if(score<90){label='Nearly ready'; hint='Close gaps, capture automated evidence and book your audit.';}
      else{label='Audit-ready'; hint='You look ready. Lock in dates with a cert body.';}
      scoreLabel.textContent = label;
      scoreHint.textContent  = hint;
    }

    document.getElementById('resetBtn').onclick = ()=>{
      Object.keys(state).forEach(k => state[k] = null);
      render(); update();
    };

    document.getElementById('pdfBtn').onclick = async ()=>{
      const { jsPDF } = window.jspdf;
      const doc = new jsPDF();
      let y = 14;
      doc.setFont('helvetica','bold'); doc.setFontSize(16);
      doc.text(`${STANDARD} Readiness Summary`, 14, y); y+=8;
      doc.setFont('helvetica','normal'); doc.setFontSize(11);
      const answered = Object.values(state).filter(v=>v!==null).length;
      const scoreRaw = Object.values(state).reduce((a,v)=>a + (v??0), 0);
      const max = QUESTIONS.length * 2;
      const score = Math.round((scoreRaw / max) * 100);
      doc.text(`Score: ${isNaN(score)?0:score}% • Answered ${answered}/${QUESTIONS.length}`, 14, y); y+=8;

      QUESTIONS.forEach((q,i)=>{
        const v = state[q.id];
        const label = v===2?'Yes':v===1?'Partial':v===0?'No':'—';
        if(y>270){doc.addPage(); y=14;}
        doc.text(`${i+1}. ${q.label} — ${label}`, 14, y); y+=7;
      });

      doc.save(`${STANDARD.replace(/\s+/g,'_').toLowerCase()}_readiness.pdf`);
    };

    render(); update();
  </script>
</Base>
