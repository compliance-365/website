---
import Base from '../../layouts/BaseLayout.astro';
import Header from '../../components/Header.astro';
import Footer from '../../components/Footer.astro';

const base = import.meta.env.BASE_URL || '/';
const STANDARD = 'ISO 27001 (Security)';

const QUESTIONS = [
  { id:'scope',    label:'Clear ISMS scope defined (org, products, locations)?' },
  { id:'risk',     label:'Risk methodology & current risk register in place?' },
  { id:'controls', label:'Controls selected & mapped (Annex A / SoA)?' },
  { id:'policy',   label:'Policy suite approved & communicated?' },
  { id:'evidence', label:'Automated evidence (M365: SharePoint/Entra/Defender/etc.)?' },
  { id:'audit',    label:'Internal audit planned/completed for this cycle?' }
];
---

<Base title="ISO 27001 Readiness Checklist" description="Answer quick questions, get an instant score and a downloadable PDF.">
  <Header />

  <section class="container section">
    <h1>{STANDARD} Readiness Checklist</h1>

    <!-- Tabs -->
    <div style="margin:12px 0 8px;display:flex;gap:10px;flex-wrap:wrap">
      <a href={`${base}checklist/iso27001`} class="pill" aria-current="page">ISO 27001</a>
      <a href={`${base}checklist/iso27701`} class="pill">ISO 27701</a>
      <a href={`${base}checklist/iso42001`} class="pill">ISO 42001</a>
    </div>

    <!-- Progress -->
    <div class="progress" style="height:8px;background:#eef2ff;border-radius:999px;overflow:hidden;margin:10px 0 16px;">
      <div id="bar" style="height:100%;width:0%;background:linear-gradient(90deg,#4F46E5,#06B6D4);transition:width .2s;"></div>
    </div>

    <!-- Form card -->
    <div class="card">
      <div id="form" class="form-grid" style="display:grid;gap:14px;">
        {QUESTIONS.map((q, i) => (
          <div class="field" data-id={q.id} style="padding:10px 12px;border:1px solid rgba(10,18,32,.08);border-radius:12px">
            <label style="display:block;font-weight:800;margin:0 0 8px;">{i + 1}. {q.label}</label>
            <div class="opts" style="display:flex;gap:8px;flex-wrap:wrap">
              <button class="opt pill" data-v="2" type="button">Yes</button>
              <button class="opt pill" data-v="1" type="button">Partial</button>
              <button class="opt pill" data-v="0" type="button">No</button>
            </div>
          </div>
        ))}
      </div>

      <div class="actions" style="display:flex;justify-content:space-between;align-items:center;margin-top:14px;">
        <button class="btn btn-ghost" id="resetBtn" type="button">Reset</button>
        <button class="btn btn-primary" id="pdfBtn" type="button">Download PDF</button>
      </div>
    </div>

    <!-- Score -->
    <div class="card" style="margin-top:14px">
      <div style="display:flex;gap:14px;align-items:center;">
        <div id="scoreNum" style="font-weight:900;font-size:1.6rem;">0%</div>
        <div>
          <strong id="scoreLabel">Not started</strong>
          <p id="scoreHint" class="muted small" style="margin:.2rem 0 0">Answer the questions to see your readiness.</p>
        </div>
      </div>
    </div>
  </section>

  <Footer />

  <!-- jsPDF -->
  <script src="https://cdn.jsdelivr.net/npm/jspdf@2.5.1/dist/jspdf.umd.min.js" defer></script>

  <script is:inline>
  // --- Constants passed from server ---
  const STANDARD  = "ISO 27001 (Security)";
  const QUESTIONS = [
    { id:'scope',    label:'Clear ISMS scope defined (org, products, locations)?' },
    { id:'risk',     label:'Risk methodology & current risk register in place?' },
    { id:'controls', label:'Controls selected & mapped (Annex A / SoA)?' },
    { id:'policy',   label:'Policy suite approved & communicated?' },
    { id:'evidence', label:'Automated evidence (M365: SharePoint/Entra/Defender/etc.)?' },
    { id:'audit',    label:'Internal audit planned/completed for this cycle?' }
  ];

  // --- Wait for DOM ready just in case ---
  (function init(){
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', setup);
    } else {
      setup();
    }
  })();

  function setup(){
    const form       = document.getElementById('form');
    const bar        = document.getElementById('bar');
    const scoreNum   = document.getElementById('scoreNum');
    const scoreLabel = document.getElementById('scoreLabel');
    const scoreHint  = document.getElementById('scoreHint');

    if (!form || !bar || !scoreNum) {
      console.warn('[Checklist] Missing DOM nodes');
      return;
    }

    // Interactive state
    const state = Object.fromEntries(QUESTIONS.map(q => [q.id, null]));

    // Event delegation for option buttons
    form.addEventListener('click', (e)=>{
      const btn = e.target.closest('button.opt');
      if (!btn) return;

      // Prevent any accidental form submission behavior
      e.preventDefault();

      const field = btn.closest('.field');
      if (!field) return;

      const id  = field.dataset.id;
      const val = Number(btn.dataset.v);

      state[id] = val;

      // Visual active state
      field.querySelectorAll('button.opt').forEach(o => o.classList.remove('active'));
      btn.classList.add('active');

      update(state, bar, scoreNum, scoreLabel, scoreHint);
    });

    // Reset
    const resetBtn = document.getElementById('resetBtn');
    if (resetBtn) {
      resetBtn.addEventListener('click', ()=>{
        Object.keys(state).forEach(k => state[k] = null);
        document.querySelectorAll('button.opt.active').forEach(o => o.classList.remove('active'));
        update(state, bar, scoreNum, scoreLabel, scoreHint);
      });
    }

    // PDF
    const pdfBtn = document.getElementById('pdfBtn');
    if (pdfBtn) {
      pdfBtn.addEventListener('click', ()=>{
        const { jsPDF } = window.jspdf || {};
        if (!jsPDF) return;

        const doc = new jsPDF();
        let y = 16;

        const { score, answered } = compute(state);

        doc.setFont('helvetica','bold'); doc.setFontSize(16);
        doc.text(`${STANDARD} Readiness Summary`, 14, y); y += 10;

        doc.setFont('helvetica','normal'); doc.setFontSize(11);
        doc.text(`Score: ${isNaN(score)?0:score}% • Answered ${answered}/${QUESTIONS.length}`, 14, y); y += 10;

        QUESTIONS.forEach((q,i)=>{
          const v = state[q.id];
          const label = v===2 ? 'Yes' : v===1 ? 'Partial' : v===0 ? 'No' : '—';
          if (y > 270) { doc.addPage(); y = 16; }
          doc.text(`${i+1}. ${q.label} — ${label}`, 14, y); y += 7;
        });

        doc.save(`${STANDARD.replace(/\s+/g,'_').toLowerCase()}_readiness.pdf`);
      });
    }

    // Add minimal CSS for interaction (safe inlined)
    const s = document.createElement('style');
    s.textContent = `
      button.opt{ cursor:pointer; }
      button.opt.active{
        background:#f0f2ff !important;
        border-color:#4F46E5 !important;
        color:#1f2a5c !important;
      }
    `;
    document.head.appendChild(s);

    // Initial render of score/progress
    update(state, bar, scoreNum, scoreLabel, scoreHint);
  }

  // Compute score & progress
  function compute(state){
    const answered = Object.values(state).filter(v => v !== null).length;
    const scoreRaw = Object.values(state).reduce((a,v)=>a + (v ?? 0), 0);
    const score = Math.round((scoreRaw / (Object.keys(state).length * 2)) * 100);
    return { answered, score: isNaN(score) ? 0 : score };
  }

  function update(state, bar, scoreNum, scoreLabel, scoreHint){
    const { answered, score } = compute(state);
    const pct = Math.round((answered / Object.keys(state).length) * 100);
    bar.style.width = pct + '%';
    scoreNum.textContent = `${score}%`;

    let label='Not started', hint='Answer the questions to see your readiness.';
    if (answered>0 && score<40)      { label='Early stage';  hint='Focus on scope, risks and core policies first.'; }
    else if (score<70)               { label='In progress';  hint='Finish SoA, implement controls & prep internal audit.'; }
    else if (score<90)               { label='Nearly ready'; hint='Close gaps, capture automated evidence & book your audit.'; }
    else                             { label='Audit-ready';  hint='You look ready. Lock in dates with a cert body.'; }
    scoreLabel.textContent = label;
    scoreHint.textContent  = hint;
  }
</script>
</Base>
